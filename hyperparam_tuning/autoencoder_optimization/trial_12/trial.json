{"trial_id": "12", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "conv_filters_0", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "conv_filters_1", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "conv_filters_2", "default": null, "conditions": [], "min_value": 32, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "conv_kernel_size_0", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_kernel_size_1", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_kernel_size_2", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv_activation_0", "default": "relu", "conditions": [], "values": ["relu", "leaky_relu", "elu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv_activation_1", "default": "relu", "conditions": [], "values": ["relu", "leaky_relu", "elu"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv_activation_2", "default": "relu", "conditions": [], "values": ["relu", "leaky_relu", "elu"], "ordered": false}}, {"class_name": "Float", "config": {"name": "dropout_rate_0", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate_1", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_rate_2", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "kernel_regularizer", "default": 1e-05, "conditions": [], "min_value": 1e-05, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Int", "config": {"name": "latent_dim", "default": null, "conditions": [], "min_value": 64, "max_value": 512, "step": 64, "sampling": "linear"}}, {"class_name": "Boolean", "config": {"name": "use_dense", "default": false, "conditions": []}}], "values": {"conv_filters_0": 32, "conv_filters_1": 224, "conv_filters_2": 32, "conv_kernel_size_0": 5, "conv_kernel_size_1": 3, "conv_kernel_size_2": 3, "conv_activation_0": "elu", "conv_activation_1": "relu", "conv_activation_2": "relu", "dropout_rate_0": 0.4, "dropout_rate_1": 0.0, "dropout_rate_2": 0.2, "kernel_regularizer": 6.411227062632815e-05, "latent_dim": 128, "use_dense": true}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 232, in _build_and_fit_model\n    model = self._try_build(hp)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 164, in _try_build\n    model = self._build_hypermodel(hp)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 155, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/models/autoencoder.py\", line 201, in model_builder\n    autoencoder = build_autoencoder(\n  File \"/Users/home/Documents/github/convolutional_autoencoder/models/autoencoder.py\", line 87, in build_autoencoder\n    x = layers.Dense(tf.reduce_prod(shape_before_flatten))(x)\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Users/home/Documents/github/convolutional_autoencoder/new_env/lib/python3.10/site-packages/keras/src/backend/common/variables.py\", line 506, in standardize_dtype\n    raise ValueError(f\"Invalid dtype: {dtype}\")\nValueError: Invalid dtype: <property object at 0x104c5e110>\n"}